services:
  app:
    container_name: ${SERVICE_NAME}
    environment:
      - PROJECT_HOST=${PROJECT_HOST}
      - PROJECT_PORT=${PROJECT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - DATABASE_HOST=${POSTGRES_HOST}
      - DATABASE_PORT=${POSTGRES_PORT}
      - ENV PATH=$PATH:/go/bin
    tty: true
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - "7700:7700"
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - migrate
      - postgresdb
    networks:
      - appbridge

  migrate:
    image: golang:1.23-alpine3.21
    depends_on:
      postgresdb:
        condition: service_healthy
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
    entrypoint: [ "/app/script/migrate.sh" ]
    networks:
      - appbridge

  postgresdb:
    image: postgres:17.2-alpine3.21
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - appbridge
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 2s
      timeout: 5s
      retries: 5

volumes:
  pg_data:

# Networks to be created to facilitate communication between containers
networks:
  appbridge:
    driver: bridge